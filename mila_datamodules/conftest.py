from __future__ import annotations

import os
import random
from pathlib import Path

import numpy as np
import pytest
import torch

from mila_datamodules.clusters.utils import get_scratch_dir, get_slurm_tmpdir, on_slurm_cluster

TEST_SEED = 123


@pytest.fixture(autouse=True)
def seed():
    random.seed(TEST_SEED)
    np.random.seed(TEST_SEED)
    torch.manual_seed(TEST_SEED)
    yield TEST_SEED


def pytest_xdist_auto_num_workers(config):
    """Return the number of workers to spawn when ``--numprocesses=auto`` is given in the command-
    line."""
    if on_slurm_cluster():
        return int(os.environ.get("SLURM_CPUS_PER_TASK", os.environ["SLURM_CPUS_ON_NODE"]))
    return os.cpu_count()


@pytest.fixture(
    scope="session",
)
def worker_tmp_path_factory(tmp_path_factory: pytest.TempPathFactory, worker_id: str):
    real_slurm_tmpdir = Path(os.environ["SLURM_TMPDIR"])
    worker_base_tmpdir = real_slurm_tmpdir / "mila_datamodules_test" / worker_id
    worker_base_tmpdir.mkdir(parents=True, exist_ok=True)

    # NOTE: Setting this environment variable changes where the temp dirs are generated by pytest.
    os.environ["PYTEST_DEBUG_TEMPROOT"] = str(worker_base_tmpdir)
    if not tmp_path_factory.getbasetemp().is_relative_to(worker_base_tmpdir):
        # BUG: Figure out why the above doesn't work as expected when using multiple workers.
        tmp_path_factory._basetemp = worker_base_tmpdir

    assert tmp_path_factory.getbasetemp().is_relative_to(worker_base_tmpdir)

    yield tmp_path_factory


@pytest.fixture()
def fake_slurm_tmpdir(
    worker_tmp_path_factory: pytest.TempPathFactory,
    monkeypatch: pytest.MonkeyPatch,
):
    """Creates a fresh new "SLURM_TMPDIR" directory local to each worker."""

    fake_slurm_tmpdir = worker_tmp_path_factory.mktemp("fake_slurm_tmpdir")
    monkeypatch.setenv("SLURM_TMPDIR", str(fake_slurm_tmpdir))

    assert get_slurm_tmpdir() == fake_slurm_tmpdir
    yield fake_slurm_tmpdir


@pytest.fixture()
def fake_scratch(
    worker_tmp_path_factory: pytest.TempPathFactory,
    monkeypatch: pytest.MonkeyPatch,
):
    """Creates a fresh new "SCRATCH" directory local to each worker."""
    fake_scratch_dir = worker_tmp_path_factory.mktemp("fake_scratch")
    monkeypatch.setenv("SCRATCH", str(fake_scratch_dir))

    assert get_scratch_dir() == fake_scratch_dir
    yield fake_scratch_dir
