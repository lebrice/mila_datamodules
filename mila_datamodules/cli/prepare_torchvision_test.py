""" TODO: Tests for the CLI. """

import os
import pytest
from torchvision.datasets import VisionDataset
from typing import Any, Callable
from pathlib import Path
from typing_extensions import Concatenate, ParamSpec

from mila_datamodules.clusters import CURRENT_CLUSTER
from mila_datamodules.clusters.utils import get_scratch_dir, get_slurm_tmpdir
from mila_datamodules.cli.prepare_torchvision import (
    VD,
    prepare_torchvision_datasets,
    PrepareVisionDataset,
)

P = ParamSpec("P", default=Any)
no_internet = pytest.mark.disable_socket

pytestmark = no_internet

datasets_to_preparation_function: dict[type[VisionDataset], Callable[..., str]] = {
    dataset_type: cluster_to_function[CURRENT_CLUSTER]
    for dataset_type, cluster_to_function in prepare_torchvision_datasets.items()
    if CURRENT_CLUSTER in cluster_to_function
}


def get_preparation_function(
    dataset_type: Callable[Concatenate[str, P], VD],
) -> PrepareVisionDataset[VD, P]:
    return datasets_to_preparation_function[dataset_type]


@pytest.fixture(
    scope="session",
)
def worker_tmp_path_factory(tmp_path_factory: pytest.TempPathFactory, worker_id: str):
    real_slurm_tmpdir = Path(os.environ["SLURM_TMPDIR"])
    worker_base_tmpdir = real_slurm_tmpdir / "mila_datamodules_test" / worker_id
    worker_base_tmpdir.mkdir(parents=True, exist_ok=True)

    # NOTE: Setting this environment variable changes where the temp dirs are generated by pytest.
    os.environ["PYTEST_DEBUG_TEMPROOT"] = str(worker_base_tmpdir)
    if not tmp_path_factory.getbasetemp().is_relative_to(worker_base_tmpdir):
        # BUG: Figure out why the above doesn't work as expected when using multiple workers.
        tmp_path_factory._basetemp = worker_base_tmpdir

    assert tmp_path_factory.getbasetemp().is_relative_to(worker_base_tmpdir)

    yield tmp_path_factory


@pytest.fixture()
def fake_slurm_tmpdir(
    worker_tmp_path_factory: pytest.TempPathFactory,
    monkeypatch: pytest.MonkeyPatch,
):
    """Creates a fresh new "SLURM_TMPDIR" directory local to each worker."""

    fake_slurm_tmpdir = worker_tmp_path_factory.mktemp("fake_slurm_tmpdir")
    monkeypatch.setenv("SLURM_TMPDIR", str(fake_slurm_tmpdir))

    assert get_slurm_tmpdir() == fake_slurm_tmpdir
    yield fake_slurm_tmpdir


@pytest.fixture()
def fake_scratch(
    worker_tmp_path_factory: pytest.TempPathFactory,
    monkeypatch: pytest.MonkeyPatch,
):
    """Creates a fresh new "SCRATCH" directory local to each worker."""
    fake_scratch_dir = worker_tmp_path_factory.mktemp("fake_scratch")
    monkeypatch.setenv("SCRATCH", str(fake_scratch_dir))

    assert get_scratch_dir() == fake_scratch_dir
    yield fake_scratch_dir


@pytest.mark.parametrize(
    "dataset_type",
    list(datasets_to_preparation_function),
)
def test_prepare_dataset(
    dataset_type: Callable[Concatenate[str, P], VD],
    fake_slurm_tmpdir: Path,
):
    dataset_preparation_function = get_preparation_function(dataset_type=dataset_type)
    assert len(list(fake_slurm_tmpdir.iterdir())) == 0  # start with an empty SLURM_TMPDIR.
    new_root = dataset_preparation_function(root=fake_slurm_tmpdir)
    dataset_type(new_root)
